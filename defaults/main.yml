# By default no additional repository is added to the hosts to
# install bird
bird_install_repo: ""

# Install the EPEL repository.
bird_install_epel: True

bird_package_state: latest

bird_conf_dir: /etc

bird_router_id: "{{ ansible_default_ipv4['address'] }}"

local_as: 12345
neighbor_as: 6789
neighbor_ip1: 192.168.10.1
neighbor_ip2: 192.168.20.1

# Auto-enable bird/bird6 if an ipv4/ipv6 default route is present
# Set to true/false to override auto detection
bird_ipv4_enabled: detect
bird_ipv6_enabled: detect

bird_configs:
  - config_file: "{{ bird_conf_dir }}/bird.conf"
    enabled: "{{ bird_ipv4_enabled }}"
    service: bird
    includes: "{{ bird_ipv4_includes }}"
    filters: "{{ bird_ipv4_filters }}"
    protocols: "{{ bird_ipv4_protocols }}"
  - config_file: "{{ bird_conf_dir }}/bird6.conf"
    enabled: "{{ bird_ipv6_enabled }}"
    service: bird6
    includes: "{{ bird_ipv6_includes }}"
    filters: "{{ bird_ipv6_filters }}"
    protocols: "{{ bird_ipv6_protocols }}"

bird_ipv4_includes: []
bird_ipv4_filters: "{{ bird_default_filter_ipv4 }}"
bird_ipv4_protocols: "{{ bird_default_protocols }}"

bird_ipv6_includes: []
bird_ipv6_filters: "{{ bird_default_filter_ipv6 }}"
bird_ipv6_protocols: "{{ bird_default_protocols }}"

bird_default_filter_ipv4:
  test_addr_ipv4: "{{ test_addr_ipv4 }}"
test_addr_ipv4: |
  # Only accept this exact network, to prevent mistakes
  if net ~ \[ 0.0.0.0/0 \] then accept;
  reject;

bird_default_filter_ipv6:
  test_addr_ipv6: "{{ test_addr_ipv6 }}"
test_addr_ipv6: |
  # Only accept this exact network, to prevent mistakes
  if net ~ \[ ::/0 \] then accept;
  reject;

bird_default_protocols:
  direct: "{{ bird_protocols_direct }}"
  kernel: "{{ bird_protocols_kernel }}"
  device: "{{ bird_protocols_device }}"
  bgp Rec1: "{{ bird_protocols_bgp1 }}"
  bgp Rec2: "{{ bird_protocols_bgp2 }}"
bird_protocols_direct: |
  interface "*";
  export none;
  import all;
bird_protocols_kernel: |
  metric 64;
  export all;
bird_protocols_device: |
  scan time 10;
bird_protocols_bgp1: |
  # Declare a iBGP first peer
  # We only advertised the routes matching match_route()
  # which is handled by anycast_healthcheck, and only
  # accept the ones allowed by our "only_test_addr" ACL
  import filter test_addr_ipv4;
  export where match_route();
  local as {{ local_as }};
  neighbor {{ neighbor_ip1 }} as {{ neighbor_as }};
  gateway recursive;
  hold time 3;
  keepalive time 1;
bird_protocols_bgp2: |
  # Declare a second iBGP peer, with the same rules than
  # the first one
  import filter test_addr_ipv4;
  export where match_route();
  local as {{ local_as }};
  neighbor {{ neighbor_ip2 }} as {{ neighbor_as }};
  gateway recursive;
  hold time 3;
  keepalive time 1;

